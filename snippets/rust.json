{
  "yewview": {
    "prefix": ["yewview"],
    "body": [
      "pub struct ${1}View {",
      "\t${2}",
      "}",
      "",
      "#[derive(Debug, PartialEq, Properties)]",
      "pub struct $1Props {",
      "\t$3",
      "}",
      "",
      "pub enum $1Msg {",
      "\t$4",
      "}",
      "impl Component for $1View {",
      "\ttype Message = $1Msg;",
      "\ttype Properties = $1Props;",
      "",
      "\tfn create(_ctx: &Context<Self>) -> Self {",
      "\t\tSelf {",
      "\t\t}",
      "\t}",
      "",
      "\tfn update(&mut self, ctx: &Context<Self>, msg: Self::Message) -> bool {",
      "\t\tmatch msg {",
      "\t\t}",
      "\t\tfalse",
      "\t}",
      "",
      "\tfn view(&self, ctx: &Context<Self>) -> Html {",
      "\t\thtml! {",
      "\t\t\t<p>{\"Hello from $1View\"}</p>",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Yew component definition"
  },
  "yewprelude": {
    "prefix": ["yewpre"],
    "body": [
        "use yew::prelude::*;"
    ]
  },
  "yewcontext": {
    "prefix": ["yewcontext"],
    "description": "A yew context component",
    "body": [
        "#[derive(Debug)]",
        "pub enum $1Action {",
            "\t$2",
        "}",
        "",
        "#[derive(Debug, PartialEq, Default)]",
        "pub struct $1 {",
            "\t$3",
        "}",
        "",
        "impl Reducible for $1 {",
            "\ttype Action = $1Action;",
            "",
            "\tfn reduce(self: std::rc::Rc<Self>, action: Self::Action) -> std::rc::Rc<Self> {",
                "\t\tmatch action {",
                "\t\t};",
                "\t\tself",
            "\t}",
        "}",
        "",
        "pub type $1Context = UseReducerHandle<$1>;",
        "",
        "#[derive(Debug, Properties, PartialEq)]",
        "pub struct $1ProviderProps {",
            "\t#[prop_or_default]",
            "\tpub children: Children,",
        "}",
        "",
        "#[function_component($1Provider)]",
        "pub fn $1_provider(props: &$1ProviderProps) -> Html {",
            "\tlet context = use_reducer($1::default);",
            "\thtml! {",
                "\t\t<ContextProvider<$1Context> context={context}>",
                    "\t\t\t{props.children.clone()}",
                "\t\t</ContextProvider<$1Context>>",
            "\t}",
        "}"
    ]
  }
}
